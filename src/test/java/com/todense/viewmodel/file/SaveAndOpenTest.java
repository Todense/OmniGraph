package com.todense.viewmodel.file;

import com.todense.model.graph.Graph;
import com.todense.viewmodel.file.format.ogr.OgrReader;
import com.todense.viewmodel.file.format.ogr.OgrWriter;
import com.todense.viewmodel.preset.PresetCreator;
import javafx.geometry.Point2D;
import javafx.scene.paint.Color;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.io.File;
import java.nio.file.Path;
import java.util.concurrent.atomic.AtomicReference;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;

class SaveAndOpenTest {

    static Path testGraphPath;
    static String graphsFilePath;
    static Graph[] graphs;

    @BeforeAll
    static void setPath(){
        graphsFilePath = "src//test//resources//graph";
        File file = new File(graphsFilePath);
        String absolutePath = file.getAbsolutePath();
        testGraphPath = Path.of(absolutePath + "//testGraph");
        Point2D point2D = new Point2D(0, 0);
        graphs = new Graph[]{
                PresetCreator.createGrid(5, 5, point2D),
                PresetCreator.createCycle(10, 1),
                PresetCreator.createCompleteBipartite(5, 5, point2D),
                PresetCreator.createMaze(10, 10, point2D),
                PresetCreator.createKingsGraph(10, 10, point2D),
                PresetCreator.createStar(10, 1)
        };
    }

    @ParameterizedTest
    @ValueSource(ints = {0,1,2,3,4,5})
    @DisplayName("Save & Open Preset Graphs")
    void saveAndOpenGraphTest(int index){
        Graph originalGraph = graphs[index];
        originalGraph.getNodes().get(0).setColor(Color.RED);
        originalGraph.getNodes().get(0).setLabelText("Hello");
        originalGraph.getEdges().get(0).setColor(Color.BLUE);
        originalGraph.getEdges().get(0).setWeight(123.456);
        OgrWriter writer = new OgrWriter();
        OgrReader reader = new OgrReader();
        assertDoesNotThrow(() ->  writer.writeGraph(originalGraph,
                new File(String.valueOf(testGraphPath))));
        AtomicReference<Graph> openedGraph = new AtomicReference<>();
        assertDoesNotThrow(() -> openedGraph.set(reader.readGraph(
                new File(String.valueOf(testGraphPath)))));
        assertEquals(originalGraph.getNodes().size(), openedGraph.get().getNodes().size());
        assertEquals(originalGraph.getEdges().size(), openedGraph.get().getEdges().size());
        assertEquals(originalGraph.getEdges().get(0).getID(), openedGraph.get().getEdges().get(0).getID());
        assertEquals(originalGraph.getNodes().get(0).getPos(), openedGraph.get().getNodes().get(0).getPos());
        assertEquals(originalGraph.getNodes().get(0).getColor(), openedGraph.get().getNodes().get(0).getColor());
        assertEquals(originalGraph.getNodes().get(0).getLabelText(), openedGraph.get().getNodes().get(0).getLabelText());
        assertEquals(originalGraph.getEdges().get(0).getID(), openedGraph.get().getEdges().get(0).getID());
        assertEquals(originalGraph.getEdges().get(0).getColor(), openedGraph.get().getEdges().get(0).getColor());
        assertEquals(originalGraph.getEdges().get(0).getWeight(), openedGraph.get().getEdges().get(0).getWeight());

    }
}